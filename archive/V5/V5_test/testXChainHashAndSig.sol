// SPDX-License-Identifier:
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract testXChainHashAndSig {
    using ECDSA for bytes32;

    // sample messageHash
    // bytes32 messageHash = keccak256(abi.encodePacked("Hello, world!"));
    // bytes32 messageHash = "0xe61e57450178cf8fbc58a193220902a251e5e4f235749f69154f6ab3b57026f8";
    // bytes32 messageHashWPrefix = "0xf017d555ebb61a3e406d18dc960505a6bcddedb6771380c3d7b55f0894268903";
    // sample signature = 0x37ad61a91644b52b67fd0d3d1ffe5e08a23725bd1cd86a8fea5940fbcf058e2d4decae647500d9f38eb2bd97f32933f2943c5141c9f1a92c06f92eb10ca0ab611b

    function setUp() public view {
        console.log("Setting up test");
    }

    /**
     * @notice Gets the signer of a messageHash. Used for signature verification.
     * @dev Uses ECDSA.recover. On Frontend, use secp256k1 to sign the messageHash
     * @dev also remember to prepend the messageHash with "\x19Ethereum Signed Message:\n32"
     * @param messageHash bytes32 hash of the message
     * @param signature bytes signature of the message
     * @return address of the signer
     */
    function getSigner(bytes32 messageHash, bytes memory signature) public view returns (address) {
        address signer = ECDSA.recover(messageHash, signature);
        console.log("Signer: ", signer);
        return signer;
    }

    function _verify(bytes32 data, bytes memory signature, address signer) public pure returns (bool) {
        bytes32 dataHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", data));
        return ECDSA.recover(dataHash, signature) == signer;
    }

    function hashSquidParams(address recipientAddress, address squidRouter, bytes memory squidData, uint256 squidValue)
        public
        pure
        returns (bytes32)
    {
        bytes32 hash = keccak256(
            // hash the parameters: dst chain recipient address, src chain squid Router address, squid call data, and squid eth value
            abi.encodePacked(recipientAddress, squidRouter, squidData, squidValue)
        );
        return hash;
    }

    function testSig() public view {
        bytes32 _hash = 0xea57aa36ce131a8f7da5da10e1f26f510ab89ac9ca5105bb1cfdad5443fc5270;
        address _depositSigner = 0x4F925dd74125446b786D3D4FA44668627B50FA94;
        console.log("Expect: ", _depositSigner);
        bytes memory _sig =
            hex"f0a194e979ce719a2d368ba9296db3246b479b725454cb03465a0361526c10b47e6d4532c1ed594bbf5ff9873dd4b6e1826d13feb29702c0347e6c39f800ce721c";

        require(_verify(_hash, _sig, _depositSigner), "Invalid signature");
        console.log("Sig valid!");

        // // Test all possible signatures....
        // bytes memory _sig0 =
        //     hex"eac85082dc7df9d45d2425edf4ab85d3889624085a22f2431f862ab91987d9da3ca240262b7db708b5c268919cae44833ea24f9a9a79cc368c3c4c509e9616a01c";
        // bytes memory _sig1 =
        //     hex"af6093de95ca16ed76f237efe73fc345a3387256f995b807c4f23d0690297b0149817bd9724b594d77db0127d47476364b3f94881037236191e3541496f1cd1d1b";
        // bytes memory _sig2 =
        //     hex"9e40380475f33830d7c6b21186b8b0a52780c226feca74a8a199176e036078371c15d1f5bcfe793e568378edcd64eda503a250614f8617fb322f5ab22a5cc5b21c";
        // bytes memory _sig3 =
        //     hex"f0a194e979ce719a2d368ba9296db3246b479b725454cb03465a0361526c10b47e6d4532c1ed594bbf5ff9873dd4b6e1826d13feb29702c0347e6c39f800ce721c";
        // bytes memory _sig4 =
        //     hex"c95d2b618a7143aeda4d56ebb22d603953ca17a61aaace810880631108a62485172546cf1d6c10351a2514eba1f308bf3c222e90c60c1f14797c056ec9a6d52f1c";
        // bytes memory _sig5 =
        //     hex"eb089034c430fb3441c18c45a3754fa45fbfb48f2fbe683baa6ce66aca562f201fb703869a80257f6fc65ac46683ae4b1c7da5bce80d8b9c52e31195c7d36f031c";
        // bytes memory _sig6 =
        //     hex"3a5b096b306dde7668352e4c8804c301d5e2ad6c41e45b283d9886450bb8808f709075df9680527c8e5cf5ea5be6d8459f0ec422c994f0fbe989ba9862d149531c";

        // console.log("Got: ");
        // getSigner(_hash, _sig1);
        // getSigner(_hash, _sig2);
        // getSigner(_hash, _sig3);
        // getSigner(_hash, _sig4);
        // getSigner(_hash, _sig5);
        // getSigner(_hash, _sig6);

        // console.log("Sig0 valid: ", _verify(_hash, _sig0, _depositSigner));
        // console.log("Sig1 valid: ", _verify(_hash, _sig1, _depositSigner));
        // console.log("Sig2 valid: ", _verify(_hash, _sig2, _depositSigner));
        // console.log("Sig3 valid: ", _verify(_hash, _sig3, _depositSigner));
        // console.log("Sig4 valid: ", _verify(_hash, _sig4, _depositSigner));
        // console.log("Sig5 valid: ", _verify(_hash, _sig5, _depositSigner));
        // console.log("Sig6 valid: ", _verify(_hash, _sig6, _depositSigner));

        // require(getSigner(_hash, _sig0) == _depositSigner, "Signer does not match");
    }

    function testHash() public view {
        // Sample data from the payload
        address recipientAddress = 0x6B3751c5b04Aa818EA90115AA06a4D9A36A16f02;
        address squidRouter = 0x481A2AAE41cd34832dDCF5A79404538bb2c02bC8;
        bytes memory squidData =
            hex"";
        uint256 squidValue = 100039907712114017;
        bytes32 _hash = 0xe0c9620e3165a0f3a0bba4e515361eda57b4fa24eb8e5ca12afbb4d74d050518;

        // Generate the hash
        bytes32 _calculated_hash = hashSquidParams(recipientAddress, squidRouter, squidData, squidValue);
        require(_hash == _calculated_hash, "Hashes do not match");
        console.log("Hashes match!");
    }
}
